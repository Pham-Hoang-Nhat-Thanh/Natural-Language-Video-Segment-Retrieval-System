version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      # Selective mounting for faster startup while preserving hot reload
      - ./frontend/app:/app/app
      - ./frontend/components:/app/components
      - ./frontend/lib:/app/lib
      - ./frontend/types:/app/types
      - ./frontend/public:/app/public
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8090
    depends_on:
      - api-gateway
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile.dev
    ports:
      - "8090:8000"
    volumes:
      # Selective mounting for faster startup
      - ./backend/api-gateway/src:/app/src
      - ./data:/app/data:ro
    environment:
      - NODE_ENV=development
      - INGEST_SERVICE_URL=http://ingest-service:8001
      - SEARCH_SERVICE_URL=http://search-service:8002
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/video_retrieval
    depends_on:
      - postgres
      - redis
      - ingest-service
      - search-service
    # Simplified health check for faster startup
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 10s
      retries: 2
      start_period: 30s
    restart: unless-stopped

  # Ingestion Service
  ingest-service:
    build:
      context: ./backend/ingest
      dockerfile: Dockerfile.dev
    ports:
      - "8051:8001"
    volumes:
      # Optimized volume mapping
      - ./data:/app/data:rw
      - ./models:/app/models:ro
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/video_retrieval
      - REDIS_URL=redis://redis:6379
      - MODEL_PATH=/app/models
      - DATA_PATH=/app/data
    depends_on:
      - postgres
      - redis
    # Simplified health check for faster startup
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 60s
      timeout: 10s
      retries: 2
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Search Service
  search-service:
    build:
      context: ./backend/search
      dockerfile: Dockerfile.dev
    ports:
      - "8052:8002"
    volumes:
      # Optimized volume mapping
      - ./data:/app/data:rw
      - ./models:/app/models:ro
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/video_retrieval
      - REDIS_URL=redis://redis:6379
      - MODEL_PATH=/app/models
      - DATA_PATH=/app/data
    depends_on:
      - postgres
      - redis
    # Simplified health check for faster startup
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 60s
      timeout: 10s
      retries: 2
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=video_retrieval
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    # Simplified health check for faster startup
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    # Simplified health check for faster startup
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    ports:
      - "9010:9000"
      - "9011:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    # Simplified health check for faster startup
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 60s
      timeout: 10s
      retries: 2

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9095:9090"
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infra/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
